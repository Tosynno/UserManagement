// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UserManagement.IntegrationTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("User Management API")]
    public partial class UserManagementAPIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UserManagement.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "User Management API", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new user")]
        public void CreateANewUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  testRunner.Given("I have a new user with Username \"testuser\", Email \"test@example.com\", Password \"C" +
                        "omplexPassword123!\", and ConfirmPassword \"ComplexPassword123!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
  testRunner.When("I send a request to create the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
  testRunner.Then("the response should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
  testRunner.And("the user should be retrievable by ReferenceId \"5236137a-74d1-4478-84a7-339123e2f6" +
                        "b4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an existing user")]
        public void UpdateAnExistingUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an existing user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
  testRunner.Given("I have an existing user with ReferenceId \"5236137a-74d1-4478-84a7-339123e2f6b4\", " +
                        "Username \"testuser\", Email \"test@example.com\", Password \"ComplexPassword123!\", a" +
                        "nd ConfirmPassword \"ComplexPassword123!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
  testRunner.When("I send a request to update the user with ReferenceId \"5236137a-74d1-4478-84a7-339" +
                        "123e2f6b4\", Username \"updateduser\" and Email \"updated@example.com\", Password \"Co" +
                        "mplexPassword123!\", and ConfirmPassword \"ComplexPassword123!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
  testRunner.Then("the response should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deactivate a user")]
        public void DeactivateAUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate a user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
  testRunner.Given("I have an existing user with ReferenceId \"5236137a-74d1-4478-84a7-339123e2f6b4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
  testRunner.When("I send a request to deactivate the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
  testRunner.Then("the response should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user with the same email cannot be created")]
        public void VerifyThatUserWithTheSameEmailCannotBeCreated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that user with the same email cannot be created", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserName",
                            "Email",
                            "Password",
                            "ConfirmPassword"});
                table1.AddRow(new string[] {
                            "user1",
                            "email1@email.de",
                            "ComplexPassword123!",
                            "ComplexPassword123!"});
#line 20
  testRunner.Given("I have a user in database", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserName",
                            "Email",
                            "Password",
                            "ConfirmPassword"});
                table2.AddRow(new string[] {
                            "user1",
                            "email1@email.de",
                            "ComplexPassword123!",
                            "ComplexPassword123!"});
#line 23
  testRunner.And("I have a user data", ((string)(null)), table2, "And ");
#line hidden
#line 26
  testRunner.When("I call Create user API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
  testRunner.Then("I will receive an error code 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
  testRunner.And("Response message should contain \"The user with the same email already exists.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that validation error is returned when required fields are not provided")]
        [NUnit.Framework.TestCaseAttribute("1", "", "email1@email.de", "ComplexPassword123!", "ComplexPassword123!", "Name field is required", null)]
        [NUnit.Framework.TestCaseAttribute("2", "user1", "", "ComplexPassword123!", "ComplexPassword123!", "Email field is required", null)]
        [NUnit.Framework.TestCaseAttribute("3", "user1", "email1@email.de", "", "ComplexPassword123!", "Password field is required", null)]
        [NUnit.Framework.TestCaseAttribute("4", "user1", "email1@email.de", "ComplexPassword123!", "", "Confirm Password is required", null)]
        public void VerifyThatValidationErrorIsReturnedWhenRequiredFieldsAreNotProvided(string row, string name, string email, string password, string confirmPassword, string error, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Row", row);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("ConfirmPassword", confirmPassword);
            argumentsOfScenario.Add("Error", error);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that validation error is returned when required fields are not provided", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserName",
                            "Email",
                            "Password",
                            "ConfirmPassword"});
                table3.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", email),
                            string.Format("{0}", password),
                            string.Format("{0}", confirmPassword)});
#line 31
  testRunner.Given("I have a user in database", ((string)(null)), table3, "Given ");
#line hidden
#line 34
  testRunner.When("I call Create user API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
  testRunner.Then("I should receive an error code 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
  testRunner.And(string.Format("Response message should contain \"{0}\"", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that validation error is returned when password does not meet complexity r" +
            "equirements or password size")]
        [NUnit.Framework.TestCaseAttribute("1", "abc", "abc", "Password length should be between 8 and 16.", null)]
        [NUnit.Framework.TestCaseAttribute("2", "123", "123", "Password length should be between 8 and 16.", null)]
        [NUnit.Framework.TestCaseAttribute("3", "abc123", "abc123", "Password length should be between 8 and 16.", null)]
        [NUnit.Framework.TestCaseAttribute("4", "123456781235678abc", "123456781235678abc", "Password length should be between 8 and 16.", null)]
        [NUnit.Framework.TestCaseAttribute("5", "1111111", "1111111", "Password does not meet complexity level, it should contain 1 upper case letter, 1" +
            " number and 1 special character.", null)]
        [NUnit.Framework.TestCaseAttribute("6", "1111111aA", "1111111aA", "Password does not meet complexity level, it should contain 1 upper case letter, 1" +
            " number and 1 special character.", null)]
        [NUnit.Framework.TestCaseAttribute("7", "1111111a!", "1111111a!", "Password does not meet complexity level, it should contain 1 upper case letter, 1" +
            " number and 1 special character.", null)]
        [NUnit.Framework.TestCaseAttribute("8", "aaaaaaa!A", "aaaaaaa!A", "Password does not meet complexity level, it should contain 1 upper case letter, 1" +
            " number and 1 special character.", null)]
        [NUnit.Framework.TestCaseAttribute("9", "ComplexPassword123!", "ComplexPasswrd!", "Password and Confirm Password do not match.", null)]
        public void VerifyThatValidationErrorIsReturnedWhenPasswordDoesNotMeetComplexityRequirementsOrPasswordSize(string row, string password, string confirmPassword, string error, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Row", row);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("ConfirmPassword", confirmPassword);
            argumentsOfScenario.Add("Error", error);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that validation error is returned when password does not meet complexity r" +
                    "equirements or password size", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserName",
                            "Email",
                            "Password",
                            "ConfirmPassword"});
                table4.AddRow(new string[] {
                            "user1",
                            "email1@email.de",
                            string.Format("{0}", password),
                            string.Format("{0}", confirmPassword)});
#line 45
  testRunner.Given("I have a user in database", ((string)(null)), table4, "Given ");
#line hidden
#line 48
  testRunner.When("I call Create user API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
  testRunner.Then("I should receive an error code 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
  testRunner.And(string.Format("Response message should contain \"{0}\"", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
